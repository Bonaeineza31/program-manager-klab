// app/dashboard/mark-attendance/page.tsx
"use client";

import React, { useState, useEffect, useCallback } from "react";
import { QrCode, MapPin, CheckCircle, XCircle, Loader2, AlertCircle } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { toast } from "sonner";
import api from "@/lib/api";
import { useAuth } from "@/lib/contexts/RoleContext";

interface Program {
  _id: string;
  name: string;
}

interface Session {
  _id: string;
  sessionId: string; // This is the unique ID generated by the backend for a specific session instance
  title: string;
  programId: Program; // Populated program
  type: 'physical' | 'online';
  status: 'scheduled' | 'active' | 'completed';
  startTime: string;
  location?: {
    lat: number;
    lng: number;
    radius: number;
  };
}

export default function MarkAttendancePage() {
  const { user, role } = useAuth();
  const [method, setMethod] = useState<'qr' | 'geolocation' | null>(null);
  const [qrData, setQrData] = useState<string>('');
  const [geolocation, setGeolocation] = useState<{ lat: number; lng: number } | null>(null);
  const [loading, setLoading] = useState(false);
  const [attendanceStatus, setAttendanceStatus] = useState<'success' | 'error' | null>(null);
  const [attendanceMessage, setAttendanceMessage] = useState<string>('');

  const [availableSessions, setAvailableSessions] = useState<Session[]>([]);
  const [selectedSessionId, setSelectedSessionId] = useState<string>('');
  const [sessionsLoading, setSessionsLoading] = useState(true);
  const [sessionsError, setSessionsError] = useState<string | null>(null);

  const fetchAvailableSessions = useCallback(async () => {
    setSessionsLoading(true);
    setSessionsError(null);
    try {
      // Trainees get sessions from programs they are enrolled in
      const response = await api.get('/attendance/trainee/sessions');
      const activeSessions = response.data.data.filter((s: Session) => s.status === 'active' || s.status === 'scheduled');
      setAvailableSessions(activeSessions);
      if (activeSessions.length > 0) {
        setSelectedSessionId(activeSessions[0].sessionId);
      }
    } catch (err: any) {
      setSessionsError(err.response?.data?.message || 'Failed to fetch available sessions. Please ensure your programs have active classes.');
      toast.error(sessionsError);
    } finally {
      setSessionsLoading(false);
    }
  }, [sessionsError]);

  useEffect(() => {
    if (role === 'trainee') {
      fetchAvailableSessions();
    }
  }, [role, fetchAvailableSessions]);

  const getCurrentLocation = useCallback(() => {
    return new Promise<{ lat: number; lng: number }>((resolve, reject) => {
      if (!navigator.geolocation) {
        reject(new Error('Geolocation is not supported by your browser.'));
        return;
      }
      navigator.geolocation.getCurrentPosition(
        (position) => {
          resolve({
            lat: position.coords.latitude,
            lng: position.coords.longitude,
          });
        },
        (error) => {
          let msg = 'Failed to get location. ';
          switch (error.code) {
            case error.PERMISSION_DENIED:
              msg += 'Please allow location access in your browser settings.';
              break;
            case error.POSITION_UNAVAILABLE:
              msg += 'Location information is unavailable.';
              break;
            case error.TIMEOUT:
              msg += 'Location request timed out.';
              break;
            default:
              msg += 'An unknown error occurred.';
          }
          reject(new Error(msg));
        },
        { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }
      );
    });
  }, []);

  const handleMarkAttendance = async () => {
    if (!selectedSessionId) {
        setAttendanceStatus('error');
        setAttendanceMessage('Please select a session.');
        return;
    }

    setLoading(true);
    setAttendanceStatus(null);
    setAttendanceMessage('');

    try {
      if (method === 'qr') {
        if (!qrData) throw new Error('QR data is required.');
        await api.post('/attendance/qr-attendance', { qrData });
      } else if (method === 'geolocation') {
        const location = await getCurrentLocation();
        await api.post('/attendance/geolocation-attendance', { 
            sessionId: selectedSessionId, // Send selected session ID for geolocation
            latitude: location.lat, 
            longitude: location.lng 
        });
      } else {
        throw new Error('Please select an attendance method.');
      }

      setAttendanceStatus('success');
      setAttendanceMessage('Attendance marked successfully!');
      toast.success('Attendance marked successfully!');
      setQrData(''); // Clear QR data after successful submission
      setGeolocation(null); // Clear geolocation after successful submission
    } catch (err: any) {
      setAttendanceStatus('error');
      setAttendanceMessage(err.response?.data?.message || err.message || 'Failed to mark attendance.');
      toast.error(attendanceMessage);
    } finally {
      setLoading(false);
    }
  };

  if (role !== 'trainee') {
    return (
      <Card>
        <CardHeader><CardTitle>Access Denied</CardTitle></CardHeader>
        <CardContent><p className="text-muted-foreground">This page is only for Trainees.</p></CardContent>
      </Card>
    );
  }

  if (sessionsLoading) {
    return (
      <div className="flex items-center justify-center h-64">
        <Loader2 className="h-8 w-8 animate-spin" />
        <span className="ml-2">Loading available sessions...</span>
      </div>
    );
  }

  if (sessionsError) {
    return (
      <div className="text-center p-8 bg-red-50 border border-red-200 rounded-lg">
        <AlertCircle className="h-8 w-8 text-red-500 mx-auto mb-2" />
        <p className="text-red-600">{sessionsError}</p>
        <Button onClick={fetchAvailableSessions} className="mt-4">Retry Sessions</Button>
      </div>
    );
  }

  if (availableSessions.length === 0) {
    return (
      <div className="text-center p-8">
        <Card>
            <CardHeader><CardTitle>No Active Sessions</CardTitle></CardHeader>
            <CardContent>
                <p className="text-muted-foreground">There are no active or scheduled sessions for you to mark attendance. Please check back later or contact your facilitator.</p>
            </CardContent>
        </Card>
      </div>
    );
  }

  const selectedSession = availableSessions.find(s => s.sessionId === selectedSessionId);

  return (
    <div className="space-y-6">
      <div>
        <h1 className="text-3xl font-bold tracking-tight">Mark Attendance</h1>
        <p className="text-muted-foreground">Mark your presence for today's class sessions.</p>
      </div>

      <Card>
        <CardHeader>
          <CardTitle>Select Session</CardTitle>
          <CardDescription>Choose the session you want to mark attendance for.</CardDescription>
        </CardHeader>
        <CardContent>
          <Select value={selectedSessionId} onValueChange={setSelectedSessionId}>
            <SelectTrigger className="w-full">
              <SelectValue placeholder="Select an active session" />
            </SelectTrigger>
            <SelectContent>
              {availableSessions.map((session) => (
                <SelectItem key={session.sessionId} value={session.sessionId}>
                  {session.title} ({session.programId?.name || 'Unknown Program'}) - {new Date(session.startTime).toLocaleTimeString()}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          {selectedSession && (
              <p className="text-sm text-muted-foreground mt-2">
                  Session Type: <span className="capitalize font-medium">{selectedSession.type}</span>
              </p>
          )}
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle>Choose Attendance Method</CardTitle>
          <CardDescription>Select how you want to mark your attendance.</CardDescription>
        </CardHeader>
        <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div 
            className={`p-6 border rounded-lg cursor-pointer transition-colors ${method === 'qr' ? 'border-primary ring-2 ring-primary/20' : 'hover:border-gray-300'}`}
            onClick={() => setMethod('qr')}
          >
            <QrCode className="h-12 w-12 text-primary mx-auto mb-4" />
            <h3 className="text-lg font-semibold text-center mb-2">Scan QR Code</h3>
            <p className="text-sm text-muted-foreground text-center">Scan the QR code displayed by your facilitator.</p>
          </div>
          <div 
            className={`p-6 border rounded-lg cursor-pointer transition-colors ${method === 'geolocation' ? 'border-primary ring-2 ring-primary/20' : 'hover:border-gray-300'}`}
            onClick={() => setMethod('geolocation')}
          >
            <MapPin className="h-12 w-12 text-primary mx-auto mb-4" />
            <h3 className="text-lg font-semibold text-center mb-2">Use Geolocation</h3>
            <p className="text-sm text-muted-foreground text-center">Allow the app to detect your location for physical classes.</p>
          </div>
        </CardContent>
      </Card>

      {method === 'qr' && (
        <Card>
          <CardHeader>
            <CardTitle>QR Code Input</CardTitle>
            <CardDescription>Enter the data obtained from scanning the QR code.</CardDescription>
          </CardHeader>
          <CardContent>
            <Label htmlFor="qrData">QR Data</Label>
            <Input
              id="qrData"
              placeholder="Paste QR code data here..."
              value={qrData}
              onChange={(e) => setQrData(e.target.value)}
            />
            <p className="text-sm text-muted-foreground mt-2">This is where the data from a scanned QR code would typically go.</p>
          </CardContent>
        </Card>
      )}

      {method === 'geolocation' && (
        <Card>
          <CardHeader>
            <CardTitle>Geolocation Attendance</CardTitle>
            <CardDescription>Click the button to send your current location.</CardDescription>
          </CardHeader>
          <CardContent>
            <Button 
              onClick={() => getCurrentLocation().then(loc => setGeolocation(loc)).catch(err => {
                toast.error(err.message);
                setAttendanceStatus('error');
                setAttendanceMessage(err.message);
              })} 
              disabled={loading}
              className="w-full"
            >
              {loading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <MapPin className="mr-2 h-4 w-4" />}
              Get My Location
            </Button>
            {geolocation && (
              <p className="text-sm text-muted-foreground mt-2">
                Location acquired: Lat {geolocation.lat.toFixed(4)}, Lng {geolocation.lng.toFixed(4)}
              </p>
            )}
          </CardContent>
        </Card>
      )}

      {attendanceStatus && (
        <div className={`p-4 rounded-lg flex items-center gap-3 ${attendanceStatus === 'success' ? 'bg-green-50 border-green-200 text-green-700' : 'bg-red-50 border-red-200 text-red-700'}`}>
          {attendanceStatus === 'success' ? <CheckCircle className="h-5 w-5" /> : <XCircle className="h-5 w-5" />}
          <p className="font-medium">{attendanceMessage}</p>
        </div>
      )}

      <Button
        onClick={handleMarkAttendance}
        disabled={loading || !method || !selectedSessionId || (method === 'qr' && !qrData) || (method === 'geolocation' && !geolocation)}
        className="w-full bg-[#1f497d] hover:bg-[#1a3f6b]"
      >
        {loading ? <Loader2 className="mr-2 h-4 w-4 animate-spin" /> : <CheckCircle className="mr-2 h-4 w-4" />}
        Mark My Attendance
      </Button>
    </div>
  );
}