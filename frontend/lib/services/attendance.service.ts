// lib/services/attendance.service.ts
import api from '../api';

import { Program, AttendanceRecord } from '@/types'; 


export interface ClassSession {
  _id: string;
  type: 'physical' | 'online';
  programId: {
    _id: string;
    name: string;
  };
  facilitatorId: {
    _id: string;
    name: string;
  };
  sessionId: string; // This is the unique ID generated by the backend for a specific session instance
  title: string;
  description?: string;
  startTime: string;
  duration: number; // in minutes
  status: 'scheduled' | 'active' | 'completed' | 'cancelled';
  accessLink?: string;
  meetingLink?: string;
  qrCodeImage?: string; // This is a frontend-only convenience field, not in DB model
  updatedAt: string;
  location?: { // For physical sessions
    lat: number;
    lng: number;
    radius: number;
  };
}

export const getSessionAttendance = async (sessionId: string): Promise<{ session: ClassSession; attendance: AttendanceRecord[] }> => {
    const response = await api.get(`/attendance/sessions/${sessionId}/attendance`);
    return response.data.data;
};

// --- Trainee Services ---

export const getMyAttendanceHistory = async (
  programId?: string, 
  startDate?: string, 
  endDate?: string
): Promise<AttendanceRecord[]> => {
    const params: { [key: string]: string } = {};
    if (programId && programId !== 'all') { 
        params.programId = programId;
    }
    if (startDate) {
        params.startDate = startDate;
    }
    if (endDate) {
        params.endDate = endDate;
    }

    const response = await api.get('/attendance/my-history', { params });
    return response.data.data;
};

export const getTraineeSessions = async (): Promise<ClassSession[]> => {
    const response = await api.get('/attendance/trainee/sessions');
    return response.data.data;
};

export const markQRAttendance = async (qrData: string): Promise<any> => {
    const response = await api.post('/attendance/qr-attendance', { qrData });
    return response.data.data;
};

export const markGeolocationAttendance = async (sessionId: string, latitude: number, longitude: number): Promise<any> => {
    const response = await api.post('/attendance/geolocation-attendance', { sessionId, latitude, longitude });
    return response.data.data;
};

// --- Facilitator Services ---

export const createSession = async (sessionData: any): Promise<ClassSession> => {
    const response = await api.post('/attendance/sessions', sessionData);
    return response.data.data;
};

export const getFacilitatorSessions = async (): Promise<ClassSession[]> => {
    const response = await api.get('/attendance/facilitator/sessions');
    return response.data.data;
};


export const startOnlineSession = async (sessionId: string): Promise<{ session: ClassSession }> => {
    const response = await api.post(`/attendance/sessions/${sessionId}/start-online`);
    return response.data.data;
};

export const startPhysicalSession = async (sessionId: string, location: {latitude: number, longitude: number, radius?: number}): Promise<ClassSession> => {
    const response = await api.post(`/attendance/sessions/${sessionId}/start-physical`, location);
    return response.data.data;
};

export const openQrForSession = async (sessionId: string): Promise<{ qrCodeImage: string }> => {
    const response = await api.post(`/attendance/sessions/${sessionId}/open-qr`);
    return response.data.data;
};

export const getSessionDetails = async (sessionId: string): Promise<{ session: ClassSession; attendanceCount: number }> => {
    const response = await api.get(`/attendance/sessions/${sessionId}`);
    return response.data.data;
};

export const endSession = async (sessionId: string): Promise<ClassSession> => {
    const response = await api.post(`/attendance/sessions/${sessionId}/end`);
    return response.data.data;
};

export const getProgramAttendanceReport = async (programId: string, startDate: string, endDate: string): Promise<ProgramAttendanceReportData> => {
    const response = await api.get(`/attendance/report/program/${programId}`, {
        params: { startDate, endDate }
    });
    return response.data.data;
};


export const markManualStudentAttendance = async (
    sessionId: string,
    userId: string,
    status: string,
    reason?: string
): Promise<AttendanceRecord> => {
    const response = await api.post(`/attendance/sessions/${sessionId}/manual-attendance`, {
        userId,
        status,
        reason
    });
    return response.data.data;
};

// NEW INTERFACE for the summary report structure
export interface ProgramAttendanceSummaryReport {
    totalSessions: number;
    report: Array<{
        userId: string;
        name: string;
        email: string;
        role: string;
        present: number;
        absent: number;
        late: number;
        excused: number;
        attendanceRate: number;
        records: Array<{
            date: string;
            status: string;
            timestamp: string;
            checkIn: string; // Or Date
            sessionTitle: string;
            method: string;
        }>;
    }>;
}


export const getProgramAttendanceSummary = async (
    programId: string,
    startDate: string,
    endDate: string
): Promise<ProgramAttendanceSummaryReport> => {
    const response = await api.get(`/attendance/report/program/${programId}/summary`, {
        params: { startDate, endDate }
    });
    return response.data.data;
};

export interface ProgramAttendanceReportData {
    programName: string;
    reportDates: string[]; // Array of YYYY-MM-DD strings for dates with sessions
    traineeReports: Array<{
        trainee: { _id: string; name: string; email: string };
        dailyAttendance: Array<{ date: string; status: string }>; // Array of daily status for a trainee
        summary: {
            present: number;
            absent: number;
            late: number;
            excused: number;
            totalDaysInPeriod: number;
        };
    }>;
    summaryStats: {
        totalDaysInPeriod: number;
        totalPresentCount: number;
        totalAbsentCount: number;
        totalLateCount: number;
        totalExcusedCount: number;
        totalTrainees: number;
    };
}

export const deleteSession = async (sessionId: string): Promise<void> => {
    await api.delete(`/attendance/sessions/${sessionId}`);
};


